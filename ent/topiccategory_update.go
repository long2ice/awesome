// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/long2ice/awesome/ent/predicate"
	"github.com/long2ice/awesome/ent/topic"
	"github.com/long2ice/awesome/ent/topiccategory"
)

// TopicCategoryUpdate is the builder for updating TopicCategory entities.
type TopicCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *TopicCategoryMutation
}

// Where appends a list predicates to the TopicCategoryUpdate builder.
func (tcu *TopicCategoryUpdate) Where(ps ...predicate.TopicCategory) *TopicCategoryUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetName sets the "name" field.
func (tcu *TopicCategoryUpdate) SetName(s string) *TopicCategoryUpdate {
	tcu.mutation.SetName(s)
	return tcu
}

// SetIcon sets the "icon" field.
func (tcu *TopicCategoryUpdate) SetIcon(s string) *TopicCategoryUpdate {
	tcu.mutation.SetIcon(s)
	return tcu
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (tcu *TopicCategoryUpdate) AddTopicIDs(ids ...int) *TopicCategoryUpdate {
	tcu.mutation.AddTopicIDs(ids...)
	return tcu
}

// AddTopics adds the "topics" edges to the Topic entity.
func (tcu *TopicCategoryUpdate) AddTopics(t ...*Topic) *TopicCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.AddTopicIDs(ids...)
}

// Mutation returns the TopicCategoryMutation object of the builder.
func (tcu *TopicCategoryUpdate) Mutation() *TopicCategoryMutation {
	return tcu.mutation
}

// ClearTopics clears all "topics" edges to the Topic entity.
func (tcu *TopicCategoryUpdate) ClearTopics() *TopicCategoryUpdate {
	tcu.mutation.ClearTopics()
	return tcu
}

// RemoveTopicIDs removes the "topics" edge to Topic entities by IDs.
func (tcu *TopicCategoryUpdate) RemoveTopicIDs(ids ...int) *TopicCategoryUpdate {
	tcu.mutation.RemoveTopicIDs(ids...)
	return tcu
}

// RemoveTopics removes "topics" edges to Topic entities.
func (tcu *TopicCategoryUpdate) RemoveTopics(t ...*Topic) *TopicCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.RemoveTopicIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TopicCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tcu.hooks) == 0 {
		affected, err = tcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopicCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcu.mutation = mutation
			affected, err = tcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tcu.hooks) - 1; i >= 0; i-- {
			if tcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TopicCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TopicCategoryUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TopicCategoryUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcu *TopicCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topiccategory.Table,
			Columns: topiccategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: topiccategory.FieldID,
			},
		},
	}
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topiccategory.FieldName,
		})
	}
	if value, ok := tcu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topiccategory.FieldIcon,
		})
	}
	if tcu.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topiccategory.TopicsTable,
			Columns: []string{topiccategory.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedTopicsIDs(); len(nodes) > 0 && !tcu.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topiccategory.TopicsTable,
			Columns: []string{topiccategory.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topiccategory.TopicsTable,
			Columns: []string{topiccategory.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topiccategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TopicCategoryUpdateOne is the builder for updating a single TopicCategory entity.
type TopicCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicCategoryMutation
}

// SetName sets the "name" field.
func (tcuo *TopicCategoryUpdateOne) SetName(s string) *TopicCategoryUpdateOne {
	tcuo.mutation.SetName(s)
	return tcuo
}

// SetIcon sets the "icon" field.
func (tcuo *TopicCategoryUpdateOne) SetIcon(s string) *TopicCategoryUpdateOne {
	tcuo.mutation.SetIcon(s)
	return tcuo
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (tcuo *TopicCategoryUpdateOne) AddTopicIDs(ids ...int) *TopicCategoryUpdateOne {
	tcuo.mutation.AddTopicIDs(ids...)
	return tcuo
}

// AddTopics adds the "topics" edges to the Topic entity.
func (tcuo *TopicCategoryUpdateOne) AddTopics(t ...*Topic) *TopicCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.AddTopicIDs(ids...)
}

// Mutation returns the TopicCategoryMutation object of the builder.
func (tcuo *TopicCategoryUpdateOne) Mutation() *TopicCategoryMutation {
	return tcuo.mutation
}

// ClearTopics clears all "topics" edges to the Topic entity.
func (tcuo *TopicCategoryUpdateOne) ClearTopics() *TopicCategoryUpdateOne {
	tcuo.mutation.ClearTopics()
	return tcuo
}

// RemoveTopicIDs removes the "topics" edge to Topic entities by IDs.
func (tcuo *TopicCategoryUpdateOne) RemoveTopicIDs(ids ...int) *TopicCategoryUpdateOne {
	tcuo.mutation.RemoveTopicIDs(ids...)
	return tcuo
}

// RemoveTopics removes "topics" edges to Topic entities.
func (tcuo *TopicCategoryUpdateOne) RemoveTopics(t ...*Topic) *TopicCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.RemoveTopicIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TopicCategoryUpdateOne) Select(field string, fields ...string) *TopicCategoryUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TopicCategory entity.
func (tcuo *TopicCategoryUpdateOne) Save(ctx context.Context) (*TopicCategory, error) {
	var (
		err  error
		node *TopicCategory
	)
	if len(tcuo.hooks) == 0 {
		node, err = tcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopicCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcuo.mutation = mutation
			node, err = tcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tcuo.hooks) - 1; i >= 0; i-- {
			if tcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TopicCategoryUpdateOne) SaveX(ctx context.Context) *TopicCategory {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TopicCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TopicCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcuo *TopicCategoryUpdateOne) sqlSave(ctx context.Context) (_node *TopicCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topiccategory.Table,
			Columns: topiccategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: topiccategory.FieldID,
			},
		},
	}
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TopicCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topiccategory.FieldID)
		for _, f := range fields {
			if !topiccategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topiccategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topiccategory.FieldName,
		})
	}
	if value, ok := tcuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topiccategory.FieldIcon,
		})
	}
	if tcuo.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topiccategory.TopicsTable,
			Columns: []string{topiccategory.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedTopicsIDs(); len(nodes) > 0 && !tcuo.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topiccategory.TopicsTable,
			Columns: []string{topiccategory.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topiccategory.TopicsTable,
			Columns: []string{topiccategory.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TopicCategory{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topiccategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
