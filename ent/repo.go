// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/long2ice/awesome/ent/repo"
	"github.com/long2ice/awesome/ent/topic"
)

// Repo is the model entity for the Repo schema.
type Repo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// SubTopic holds the value of the "sub_topic" field.
	SubTopic string `json:"sub_topic,omitempty"`
	// Type holds the value of the "type" field.
	Type repo.Type `json:"type,omitempty"`
	// StarCount holds the value of the "star_count" field.
	StarCount int `json:"star_count,omitempty"`
	// ForkCount holds the value of the "fork_count" field.
	ForkCount int `json:"fork_count,omitempty"`
	// WatchCount holds the value of the "watch_count" field.
	WatchCount int `json:"watch_count,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepoQuery when eager-loading is set.
	Edges RepoEdges `json:"-"`
}

// RepoEdges holds the relations/edges for other nodes in the graph.
type RepoEdges struct {
	// Topics holds the value of the topics edge.
	Topics *Topic `json:"topics,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TopicsOrErr returns the Topics value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepoEdges) TopicsOrErr() (*Topic, error) {
	if e.loadedTypes[0] {
		if e.Topics == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: topic.Label}
		}
		return e.Topics, nil
	}
	return nil, &NotLoadedError{edge: "topics"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case repo.FieldID, repo.FieldStarCount, repo.FieldForkCount, repo.FieldWatchCount, repo.FieldTopicID:
			values[i] = new(sql.NullInt64)
		case repo.FieldName, repo.FieldDescription, repo.FieldURL, repo.FieldSubTopic, repo.FieldType:
			values[i] = new(sql.NullString)
		case repo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Repo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repo fields.
func (r *Repo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case repo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case repo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case repo.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				r.URL = value.String
			}
		case repo.FieldSubTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_topic", values[i])
			} else if value.Valid {
				r.SubTopic = value.String
			}
		case repo.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = repo.Type(value.String)
			}
		case repo.FieldStarCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field star_count", values[i])
			} else if value.Valid {
				r.StarCount = int(value.Int64)
			}
		case repo.FieldForkCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fork_count", values[i])
			} else if value.Valid {
				r.ForkCount = int(value.Int64)
			}
		case repo.FieldWatchCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field watch_count", values[i])
			} else if value.Valid {
				r.WatchCount = int(value.Int64)
			}
		case repo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case repo.FieldTopicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				r.TopicID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTopics queries the "topics" edge of the Repo entity.
func (r *Repo) QueryTopics() *TopicQuery {
	return NewRepoClient(r.config).QueryTopics(r)
}

// Update returns a builder for updating this Repo.
// Note that you need to call Repo.Unwrap() before calling this method if this Repo
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repo) Update() *RepoUpdateOne {
	return NewRepoClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Repo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Repo) Unwrap() *Repo {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Repo is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repo) String() string {
	var builder strings.Builder
	builder.WriteString("Repo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(r.URL)
	builder.WriteString(", ")
	builder.WriteString("sub_topic=")
	builder.WriteString(r.SubTopic)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	builder.WriteString("star_count=")
	builder.WriteString(fmt.Sprintf("%v", r.StarCount))
	builder.WriteString(", ")
	builder.WriteString("fork_count=")
	builder.WriteString(fmt.Sprintf("%v", r.ForkCount))
	builder.WriteString(", ")
	builder.WriteString("watch_count=")
	builder.WriteString(fmt.Sprintf("%v", r.WatchCount))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("topic_id=")
	builder.WriteString(fmt.Sprintf("%v", r.TopicID))
	builder.WriteByte(')')
	return builder.String()
}

// Repos is a parsable slice of Repo.
type Repos []*Repo
