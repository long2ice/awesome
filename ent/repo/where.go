// Code generated by ent, DO NOT EDIT.

package repo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/long2ice/awesome/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldDescription, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldURL, v))
}

// SubTopic applies equality check predicate on the "sub_topic" field. It's identical to SubTopicEQ.
func SubTopic(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldSubTopic, v))
}

// StarCount applies equality check predicate on the "star_count" field. It's identical to StarCountEQ.
func StarCount(v int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldStarCount, v))
}

// ForkCount applies equality check predicate on the "fork_count" field. It's identical to ForkCountEQ.
func ForkCount(v int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldForkCount, v))
}

// WatchCount applies equality check predicate on the "watch_count" field. It's identical to WatchCountEQ.
func WatchCount(v int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldWatchCount, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldUpdatedAt, v))
}

// TopicID applies equality check predicate on the "topic_id" field. It's identical to TopicIDEQ.
func TopicID(v int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldTopicID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContainsFold(FieldDescription, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContainsFold(FieldURL, v))
}

// SubTopicEQ applies the EQ predicate on the "sub_topic" field.
func SubTopicEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldSubTopic, v))
}

// SubTopicNEQ applies the NEQ predicate on the "sub_topic" field.
func SubTopicNEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldSubTopic, v))
}

// SubTopicIn applies the In predicate on the "sub_topic" field.
func SubTopicIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldSubTopic, vs...))
}

// SubTopicNotIn applies the NotIn predicate on the "sub_topic" field.
func SubTopicNotIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldSubTopic, vs...))
}

// SubTopicGT applies the GT predicate on the "sub_topic" field.
func SubTopicGT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldSubTopic, v))
}

// SubTopicGTE applies the GTE predicate on the "sub_topic" field.
func SubTopicGTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldSubTopic, v))
}

// SubTopicLT applies the LT predicate on the "sub_topic" field.
func SubTopicLT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldSubTopic, v))
}

// SubTopicLTE applies the LTE predicate on the "sub_topic" field.
func SubTopicLTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldSubTopic, v))
}

// SubTopicContains applies the Contains predicate on the "sub_topic" field.
func SubTopicContains(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContains(FieldSubTopic, v))
}

// SubTopicHasPrefix applies the HasPrefix predicate on the "sub_topic" field.
func SubTopicHasPrefix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasPrefix(FieldSubTopic, v))
}

// SubTopicHasSuffix applies the HasSuffix predicate on the "sub_topic" field.
func SubTopicHasSuffix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasSuffix(FieldSubTopic, v))
}

// SubTopicEqualFold applies the EqualFold predicate on the "sub_topic" field.
func SubTopicEqualFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEqualFold(FieldSubTopic, v))
}

// SubTopicContainsFold applies the ContainsFold predicate on the "sub_topic" field.
func SubTopicContainsFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContainsFold(FieldSubTopic, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldType, vs...))
}

// StarCountEQ applies the EQ predicate on the "star_count" field.
func StarCountEQ(v int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldStarCount, v))
}

// StarCountNEQ applies the NEQ predicate on the "star_count" field.
func StarCountNEQ(v int) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldStarCount, v))
}

// StarCountIn applies the In predicate on the "star_count" field.
func StarCountIn(vs ...int) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldStarCount, vs...))
}

// StarCountNotIn applies the NotIn predicate on the "star_count" field.
func StarCountNotIn(vs ...int) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldStarCount, vs...))
}

// StarCountGT applies the GT predicate on the "star_count" field.
func StarCountGT(v int) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldStarCount, v))
}

// StarCountGTE applies the GTE predicate on the "star_count" field.
func StarCountGTE(v int) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldStarCount, v))
}

// StarCountLT applies the LT predicate on the "star_count" field.
func StarCountLT(v int) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldStarCount, v))
}

// StarCountLTE applies the LTE predicate on the "star_count" field.
func StarCountLTE(v int) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldStarCount, v))
}

// StarCountIsNil applies the IsNil predicate on the "star_count" field.
func StarCountIsNil() predicate.Repo {
	return predicate.Repo(sql.FieldIsNull(FieldStarCount))
}

// StarCountNotNil applies the NotNil predicate on the "star_count" field.
func StarCountNotNil() predicate.Repo {
	return predicate.Repo(sql.FieldNotNull(FieldStarCount))
}

// ForkCountEQ applies the EQ predicate on the "fork_count" field.
func ForkCountEQ(v int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldForkCount, v))
}

// ForkCountNEQ applies the NEQ predicate on the "fork_count" field.
func ForkCountNEQ(v int) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldForkCount, v))
}

// ForkCountIn applies the In predicate on the "fork_count" field.
func ForkCountIn(vs ...int) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldForkCount, vs...))
}

// ForkCountNotIn applies the NotIn predicate on the "fork_count" field.
func ForkCountNotIn(vs ...int) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldForkCount, vs...))
}

// ForkCountGT applies the GT predicate on the "fork_count" field.
func ForkCountGT(v int) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldForkCount, v))
}

// ForkCountGTE applies the GTE predicate on the "fork_count" field.
func ForkCountGTE(v int) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldForkCount, v))
}

// ForkCountLT applies the LT predicate on the "fork_count" field.
func ForkCountLT(v int) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldForkCount, v))
}

// ForkCountLTE applies the LTE predicate on the "fork_count" field.
func ForkCountLTE(v int) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldForkCount, v))
}

// ForkCountIsNil applies the IsNil predicate on the "fork_count" field.
func ForkCountIsNil() predicate.Repo {
	return predicate.Repo(sql.FieldIsNull(FieldForkCount))
}

// ForkCountNotNil applies the NotNil predicate on the "fork_count" field.
func ForkCountNotNil() predicate.Repo {
	return predicate.Repo(sql.FieldNotNull(FieldForkCount))
}

// WatchCountEQ applies the EQ predicate on the "watch_count" field.
func WatchCountEQ(v int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldWatchCount, v))
}

// WatchCountNEQ applies the NEQ predicate on the "watch_count" field.
func WatchCountNEQ(v int) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldWatchCount, v))
}

// WatchCountIn applies the In predicate on the "watch_count" field.
func WatchCountIn(vs ...int) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldWatchCount, vs...))
}

// WatchCountNotIn applies the NotIn predicate on the "watch_count" field.
func WatchCountNotIn(vs ...int) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldWatchCount, vs...))
}

// WatchCountGT applies the GT predicate on the "watch_count" field.
func WatchCountGT(v int) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldWatchCount, v))
}

// WatchCountGTE applies the GTE predicate on the "watch_count" field.
func WatchCountGTE(v int) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldWatchCount, v))
}

// WatchCountLT applies the LT predicate on the "watch_count" field.
func WatchCountLT(v int) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldWatchCount, v))
}

// WatchCountLTE applies the LTE predicate on the "watch_count" field.
func WatchCountLTE(v int) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldWatchCount, v))
}

// WatchCountIsNil applies the IsNil predicate on the "watch_count" field.
func WatchCountIsNil() predicate.Repo {
	return predicate.Repo(sql.FieldIsNull(FieldWatchCount))
}

// WatchCountNotNil applies the NotNil predicate on the "watch_count" field.
func WatchCountNotNil() predicate.Repo {
	return predicate.Repo(sql.FieldNotNull(FieldWatchCount))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Repo {
	return predicate.Repo(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Repo {
	return predicate.Repo(sql.FieldNotNull(FieldUpdatedAt))
}

// TopicIDEQ applies the EQ predicate on the "topic_id" field.
func TopicIDEQ(v int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldTopicID, v))
}

// TopicIDNEQ applies the NEQ predicate on the "topic_id" field.
func TopicIDNEQ(v int) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldTopicID, v))
}

// TopicIDIn applies the In predicate on the "topic_id" field.
func TopicIDIn(vs ...int) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldTopicID, vs...))
}

// TopicIDNotIn applies the NotIn predicate on the "topic_id" field.
func TopicIDNotIn(vs ...int) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldTopicID, vs...))
}

// HasTopics applies the HasEdge predicate on the "topics" edge.
func HasTopics() predicate.Repo {
	return predicate.Repo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TopicsTable, TopicsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicsWith applies the HasEdge predicate on the "topics" edge with a given conditions (other predicates).
func HasTopicsWith(preds ...predicate.Topic) predicate.Repo {
	return predicate.Repo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TopicsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TopicsTable, TopicsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Repo) predicate.Repo {
	return predicate.Repo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Repo) predicate.Repo {
	return predicate.Repo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repo) predicate.Repo {
	return predicate.Repo(func(s *sql.Selector) {
		p(s.Not())
	})
}
