// Code generated by ent, DO NOT EDIT.

package repo

import (
	"fmt"
)

const (
	// Label holds the string label denoting the repo type in the database.
	Label = "repo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldSubTopic holds the string denoting the sub_topic field in the database.
	FieldSubTopic = "sub_topic"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStarCount holds the string denoting the star_count field in the database.
	FieldStarCount = "star_count"
	// FieldForkCount holds the string denoting the fork_count field in the database.
	FieldForkCount = "fork_count"
	// FieldWatchCount holds the string denoting the watch_count field in the database.
	FieldWatchCount = "watch_count"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTopicID holds the string denoting the topic_id field in the database.
	FieldTopicID = "topic_id"
	// EdgeTopics holds the string denoting the topics edge name in mutations.
	EdgeTopics = "topics"
	// Table holds the table name of the repo in the database.
	Table = "repo"
	// TopicsTable is the table that holds the topics relation/edge.
	TopicsTable = "repo"
	// TopicsInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicsInverseTable = "topic"
	// TopicsColumn is the table column denoting the topics relation/edge.
	TopicsColumn = "topic_id"
)

// Columns holds all SQL columns for repo fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldURL,
	FieldSubTopic,
	FieldType,
	FieldStarCount,
	FieldForkCount,
	FieldWatchCount,
	FieldUpdatedAt,
	FieldTopicID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// SubTopicValidator is a validator for the "sub_topic" field. It is called by the builders before save.
	SubTopicValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeRepo     Type = "repo"
	TypeResource Type = "resource"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeRepo, TypeResource:
		return nil
	default:
		return fmt.Errorf("repo: invalid enum value for type field: %q", _type)
	}
}
